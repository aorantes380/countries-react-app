{"version":3,"sources":["components/Header.js","components/Wrap.js","components/Country.js","components/CountryList.js","components/CountrySelected.js","App.js","serviceWorker.js","index.js"],"names":["HeaderStyled","Styled","div","Header","WrapStyled","Wrap","children","Fragment","CountryStyled","Country","flag","name","population","region","code","loading","src","alt","className","to","CountryListStyled","CountryList","useState","countries","setCountries","useEffect","fetch","then","response","json","data","map","country","key","alpha3Code","capital","callingCodes","CountrySelectedStyled","CountrySelected","match","history","setCountry","params","id","subregion","area","onClick","goBack","App","path","component","Boolean","window","location","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"ojBAGA,IAAMA,EAAeC,IAAOC,IAAV,KAqBHC,MARf,WACI,OACI,kBAACH,EAAD,KACI,qD,6GCfZ,IAAMI,EAAaH,IAAOC,IAAV,KAgBDG,MAXf,YAA2B,IAAZC,EAAW,EAAXA,SAEX,OACI,kBAAC,IAAMC,SAAP,KACI,kBAAC,EAAD,MACA,kBAACH,EAAD,KACKE,K,mgCCXjB,IAAME,EAAgBP,IAAOC,IAAV,KA+DJO,MAtBf,YAMI,IALAC,EAKD,EALCA,KACAC,EAID,EAJCA,KACAC,EAGD,EAHCA,WACAC,EAED,EAFCA,OACAC,EACD,EADCA,KAGA,OACI,kBAACN,EAAD,KACI,yBAAKO,QAAQ,OAAOC,IAAKN,EAAMO,IAAKN,IACpC,yBAAKO,UAAU,WACX,4BAAKP,GACL,2BAAG,6CAAmBC,GACtB,2BAAG,uCAAgBC,GACnB,kBAAC,IAAD,CAAMK,UAAU,WAAWC,GAAE,mBAAcL,IAA3C,mB,oSCxDhB,IAAMM,EAAoBnB,IAAOC,IAAV,KAsCRmB,MA3Bf,WAAuB,IAAD,EACgBC,mBAAS,IADzB,mBACXC,EADW,KACAC,EADA,KASlB,OANAC,qBAAU,WACNC,MAAM,yCACLC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAI,OAAIN,EAAaM,QAC5B,IAIC,kBAACV,EAAD,KACKG,EAAUQ,KAAI,SAAAC,GAAO,OAClB,kBAAC,EAAD,CACIC,IAAKD,EAAQE,WACbxB,KAAMsB,EAAQtB,KACdC,KAAMqB,EAAQrB,KACdC,WAAYoB,EAAQpB,WACpBC,OAAQmB,EAAQnB,OAChBsB,QAASH,EAAQG,QACjBrB,KAAMkB,EAAQI,oB,yxBC/BlC,IAAMC,EAAwBpC,IAAOC,IAAV,KAoEZoC,MAjCf,YAA8C,IAAnBC,EAAkB,EAAlBA,MAAOC,EAAW,EAAXA,QAAW,EACXlB,mBAAS,IADE,mBAClCU,EADkC,KACzBS,EADyB,KAazC,OAVAhB,qBAAU,WACNC,MAAM,gDAAD,OAAiDa,EAAMG,OAAOC,KAClEhB,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAI,OAAIW,EAAWX,EAAK,SAC/B,CAACE,EAASO,EAAMG,OAAOC,KAOtB,kBAACN,EAAD,KACI,yBAAKnB,UAAU,kBACX,yBAAKA,UAAU,QACX,yBAAKF,IAAKgB,EAAQtB,KAAMO,IAAKe,EAAQrB,QAEzC,yBAAKO,UAAU,WACX,4BAAKc,EAAQrB,MACb,2BAAG,wCAAiBqB,EAAQG,SAC5B,2BAAG,6CAAmBH,EAAQpB,YAC9B,2BAAG,uCAAgBoB,EAAQnB,QAC3B,2BAAG,0CAAmBmB,EAAQY,WAC9B,2BAAG,qCAAcZ,EAAQa,QAGjC,4BAAQ3B,UAAU,WAAW4B,QAnBrC,WACIN,EAAQO,WAkBJ,cCxCGC,MAjBf,WACE,OAEI,yBAAK9B,UAAU,OACb,kBAAC,EAAD,KACE,kBAAC,IAAD,KACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAO+B,KAAK,eAAeC,UAAWZ,IACtC,kBAAC,IAAD,CAAOW,KAAK,IAAIC,UAAW7B,SCNrB8B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASf,MACvB,2DCZNgB,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBnC,MAAK,SAAAoC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.98a8a3b7.chunk.js","sourcesContent":["import React from 'react';\nimport Styled from 'styled-components';\n\nconst HeaderStyled = Styled.div `\n    background: black;\n    padding: 10px 0;\n    h1{\n        color: white;\n        margin: 0;\n        font-size: 25px;\n        @media screen and (min-width: 767px) {\n            font-size: 50px;\n        }\n    }\n`\n\nfunction Header(){\n    return(\n        <HeaderStyled>\n            <h1>Países del mundo</h1>\n        </HeaderStyled>\n    )\n}\n\nexport default Header;","import React from 'react';\nimport Styled from 'styled-components';\nimport Header from './Header';\n\nconst WrapStyled = Styled.div `\n    width: 90%;\n    margin: 0 auto;\n`\n\nfunction Wrap({children}) {\n\n    return (\n        <React.Fragment>\n            <Header />\n            <WrapStyled>\n                {children}\n            </WrapStyled>\n        </React.Fragment>\n    )\n}\nexport default Wrap;","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport Styled from 'styled-components';\n\nconst CountryStyled = Styled.div `\n    box-shadow: rgba(0, 0, 0, 0.03) 0px 0px 7px 2px;\n    border-radius: 4px;\n    background-color: white;\n    box-sizing: border-box;\n    overflow: hidden;\n    border: 1px solid white;\n    cursor: pointer;\n    img{\n        width: 100%;\n        height: 130px;\n        object-fit: cover;\n        vertical-align: top;\n    }\n    .content{\n        padding: 1.5rem;\n        h4{\n            font-size: 1.5rem;\n            margin: 0 0 20px;\n        }\n        p{\n            margin: 0;\n            line-height: 1.5rem;\n        }\n        .btn-more{\n            background: black;\n            color: white;\n            border: none;\n            border-radius: 5px;\n            padding: 10px 20px;\n            text-decoration: none;\n            margin-top: 30px;\n            display:inline-block;\n        }\n    }\n    &:hover {\n        border: 1px solid #ccc;\n        box-shadow: rgba(0, 0, 0, 0.06) 0px 0px 7px 2px;\n    }\n`\n\nfunction Country({\n    flag,\n    name,\n    population,\n    region,\n    code,\n}) {\n\n    return (\n        <CountryStyled>\n            <img loading=\"lazy\" src={flag} alt={name} />\n            <div className=\"content\">\n                <h4>{name}</h4>\n                <p><b>Población: </b>{population}</p>\n                <p><b>Region: </b>{region}</p>\n                <Link className=\"btn-more\" to={`/country/${code}`}>\n                    Ver detalles\n                </Link>\n            </div>\n        </CountryStyled>\n    )\n}\nexport default Country;","import React, { useEffect, useState } from 'react';\nimport Styled from 'styled-components';\nimport Country from './Country';\n\nconst CountryListStyled = Styled.div `\n    width: 100%;\n    box-sizing: border-box;\n    padding: 40px 20px;\n    display: grid;\n    grid-template-columns: repeat(auto-fill, 250px);\n    justify-content: center;\n    grid-gap: 30px;\n    margin: 60px auto;\n`\n\nfunction CountryList(){\n    const [countries, setCountries] = useState([]);\n\n    useEffect(()=>{\n        fetch('https://restcountries.eu/rest/v2/all/')\n        .then(response => response.json())\n        .then(data => setCountries(data));\n    }, [])\n\n    return (\n        \n        <CountryListStyled>\n            {countries.map(country => (\n                <Country  \n                    key={country.alpha3Code}\n                    flag={country.flag}\n                    name={country.name}\n                    population={country.population}\n                    region={country.region}\n                    capital={country.capital}\n                    code={country.callingCodes}\n                />\n            ))}     \n        </CountryListStyled>\n    )\n}\n\nexport default CountryList;","import React, { useEffect, useState } from 'react';\nimport Styled from 'styled-components';\nimport { Link } from 'react-router-dom';\n\nconst CountrySelectedStyled = Styled.div `\n\nmargin-top:80px;\n    .back-btn{\n        background: black;\n        color: white;\n        border: none;\n        border-radius: 5px;\n        padding: 15px 30px;\n        text-decoration: none;\n        display: inline-block;\n        margin-top: 40px;\n    }\n    .countryDetails{\n        display: grid;\n        grid-template-columns: repeat(1, 1fr);\n        grid-gap: 30px;\n        .flag{\n            img{\n                width: 100%;\n                height:auto;\n            }\n        }\n        .content{\n            h1{\n                text-align: left;\n            }\n        }\n        @media screen and (min-width: 767px) {\n            grid-template-columns: repeat(2, 1fr);\n        }\n    }\n\n`\n\nfunction CountrySelected({ match, history }) {\n    const [country, setCountry] = useState([]);\n\n    useEffect(()=>{\n        fetch(`https://restcountries.eu/rest/v2/callingcode/${match.params.id}`)\n        .then(response => response.json())\n        .then(data => setCountry(data[0]));\n    }, [country, match.params.id]);\n\n    function handleClick() {\n        history.goBack()\n    }\n\n    return (\n        <CountrySelectedStyled>\n            <div className=\"countryDetails\">\n                <div className=\"flag\">\n                    <img src={country.flag} alt={country.name} />\n                </div>\n                <div className=\"content\">\n                    <h1>{country.name}</h1>\n                    <p><b>Capital: </b>{country.capital}</p>\n                    <p><b>Población: </b>{country.population}</p>\n                    <p><b>Region: </b>{country.region}</p>\n                    <p><b>Subregion: </b>{country.subregion}</p>\n                    <p><b>Area: </b>{country.area}</p>\n                </div>\n            </div>\n            <button className=\"back-btn\" onClick={handleClick}>Regresar</button>\n        </CountrySelectedStyled>\n    )\n}\n\nexport default CountrySelected;","import React from 'react';\nimport './App.css';\nimport {\n  BrowserRouter as Router,\n  Route,\n  Switch,\n} from 'react-router-dom'\nimport Wrap from './components/Wrap'\nimport CountryList from './components/CountryList';\nimport CountrySelected from './components/CountrySelected';\nfunction App() {\n  return (\n\n      <div className=\"App\">\n        <Wrap>\n          <Router>\n            <Switch>\n              <Route path=\"/country/:id\" component={CountrySelected} />\n              <Route path=\"/\" component={CountryList}>\n              </Route>\n            </Switch>\n          </Router>\n        </Wrap>\n      </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}